Graphs / Networks

Node / Vertices
Edges /Links: link nodes
Degree of a node is number of edges connected to that node.

Eulerian path - path through a graph along the edges that only hits each edge once while visiting all the nodes in a graph.

Eulerian Tour - special kind of Eulerian path where you start and end at the same node.

Divide and Conquer:
Break a problem into roughly equal sized subproblems, solve them separately, and then combine results.

Types of Networks:

Chain Network: chains do not have cycles
o----o-----o-----o-----o
e.g. 5 nodes, 4 edges.          m = n - 1       m edges with n nodes


Ring Network: rings must have cycles
o----o-----o-----o-----o
|----------------------|
e.g. 5 nodes, 5 edges.               m = n          m edges with n nodes

Grid Network
n = 20, m = 15 + 16 = 31


Complete Set:
f(n) is in o(g(n)) == f(n) < g(n)               little o
f(n) is in O(g(n)) == f(n) <= g(n)              Big O
f(n) is in big theta(g(n)) == f(n) = g(n)       Theta (Big)
f(n) is in big omega(g(n)) == f(n) >= g(n)      Omega (Big)
f(n) is in little omega(g(n)) == f(n) > g(n)    omega (little)

Planar Graphs: Graph drawn on a plane such that the edges don't cross.

    R3

o------o---\
|      |    \
|   R1 | R2  o
|      |    /
o------o---/

n = 5, m = 6, r = 3         where n is a node, m is an edge, and r is a region.
Relationship between n, m, and r: For any planar, n - m + r = 2

Growth rate of edges in planar graph:
every region must be bounded by at least 3 edges.
so with n - m + r = 2 in mind, 3 * regions (3r) must be less than 2 * edges (2m)
3r <= 2m, r <= 2/3 * m
m + 2 = n + r <= n + 2/3 * m
3m + 6 <= 3n + 2m
m <= 3n - 6 which is in Theta(n) (linear)

Recap:
For chain, ring, grid, and planar graphs, the relationship of m with regards to n is in Theta(n). That is, their growth as n nodes increases is linear - f(n) = g(n)


Complete Graph: aka Clique
Each node in a graph is connected to each other node, e.g. a 5 node graph ends up with a star in a pentagon, 5 nodes and 10 edges.

m = n * (n-1) / 2 which is in Theta(n^2). That is, the growth relationship of m with regards to n is quadratic.

Tree Graphs:
-is connected
-has no cycles or loops.


Randomly Generated Graphs:
Erdos - Renyi Model
n nodes
p connectivity probability (coin flip, for instance)
1. Generate nodes.
2. For each node pair, i,j
connect i,j with probability p

Some Recursive Graphs:
1. n nodes
2. create graph on n/2 nodes
3. create graph on other n/2 nodes
4. generate edges between the two smaller graphs
5. return graph

Recurrence Relations
T: # of edges
T(1) = 0
T(n) = 2T(n/2) + 1

Tree graphs grow linearly. m = 2n = Theta(n)


GRAPH RECAP:
Recurrence                              Graphs                          Edge Growth
T(n) = 2T(n/2) + 1                      tree, chain                     Theta(n)
T(n) = 2T(n/2) + Theta(n^2)          clique, dense graph             Theta(n^2)
T(n) = 2T(n/2) + Theta(n)            hypercube, tangled hypercube    Theta(n * log(n))

Star Network:
has a single node in the center
that is connected to all the rest of the nodes in the graph directly

Clustering coefficients:

Clustering coefficient of a node:
CC(v): v: a node, Kv: its degree, Nv: number of links between neigbours of v
CC(v) = 2Nv / (Kv * (Kv -1))

The clustering coefficient is the fraction of possible interconnections:
                                0 <= CC(v) <= 1
Star (no neighbours connected)                  clique (all neighbours connected)

Clustering coefficient of a graph:
The average of the clustering coefficients CC(v) of the nodes in the graph.


Connected Components
-is everything connected?
-is a set of nodes isolatd?
-can all nodes communicate?

Graph searching:

Depth First search: Search first as deep as possible (often with recursion) from an arbitrary starting point
Depth First without recursion:
-Grab the last element of an open list
-Mark any unmarked neighbors and add to open list
-Repeat until nothing is open

Choose starting point, create open list, append to end of list, check the last element's neighbors and pop it.

a-b-c-d-e-f-g
5-4-2-1-3-6-7


Breadth First search
Breadth First without recursion:
-Grab the first element of an open list
-Mark any unmarked neighbors and add to open list
-Repeat until nothing is open
a-b-c-d-e-f-g

Choose starting point, create open list, append to end of list, check the first element's neighbors and pop it.


Single Source Shortest Paths
Find "central" nodes.
How central is V1? That is, what is its average shortest path length to all of the other nodes?

shortest path length V1 to V2 takes time: Theta(n+m) (the nodes + edges)
Naively: repeat for all nodes: Theta(n(n+m)) = Theta(n^2 + nm)


Bridge Edges:
1. Rewrite graph as a tree
2. "post order" the nodes - That is, to assign a number to a node, first make sure all of the nodes on its left and right are numbered before giving that node a number. That is, the first node considered is the last node assigned a number.

Bipartite Graphs:
1. Can have minimum m = n - 1 edges
2. Can have maximum nleft * nright (nodes on left multiplied by nodes on right)
3. Maximum possible path length (a chain) is the min(2 * nleft, 2 * nright, nleft + nright -1)
4. Maximum possible clustering coefficient for a node in a bipartite graph: Always 0

Social Network Analysis
-betweenness centrality - node is central if it is between lots of other nodes that must pass through it to connect with other nodes.
-closeness centrality - closeness of a node is the average length of the shortest path between the node and all other nodes in the graph. The more central a node is, the closer it is to all other nodes
-eigenvector centrality
-node centrality - node is central if it has lots of edges connected, in a very local sense, like the degree of a node, the number of neighbors it has

Computing Statistics:
statistics - a number that summarizes a list of numbers
List of centrality scores:
-how many?
-largest?
-total?
-# of scores between 2 and 3?

Some statistics:
max
min
midpoint (average of max & min)
mean (average of all values in L)
mode (most common value in L)
median (middlemost value in L, half are bigger, half are smaller)

Statistics solutions on Sorted Lists:
min: L[0]
max: L[n-1]
midpoint: (L[0] + L[n-1]) / 2.0
median: L[n / 2]
These run in Theta(1)       (constant runtime)

mean: sum all values / n     (n = len(L))

Getting statistics on Unsorted Lists:
Plan A: Sort the list first, runtime = Theta(n * logn), which is slower than just iterating through the list.       (logarithmic runtime, slower than Plan B)
Plan B: Extract the statistic in (effectively) one scan through the data by iterating through the list, runtime = Theta(n)      (linear runtime)

Order Statistics:
The ith order statistic is the value that ends up in position i if the data is sorted.
min: order statistic 1
2nd smallest: order statistc 2
median: order statistic n/2
2nd largest: order statistic n - 1
max: order statistic n

Randomized Top K
Finds the top k (in no particular order) in Theta(n) (linear), independent of k
Find the Rank of some value V it would fall in a sorted list if you were to sort, but without actually sorting. Can find by iterating through the list and counting all of the numbers smaller than that value V. You end up with a new list partitioned around V, where all values to its left are smaller and all values to its right are larger, but neither smaller nor larger groups are necessarily in order.

Analysis of Top k via partitioning:
T(1) = 1
T(n) <= n + 1/2 * T(n/2) + 1/2 * T(n)

T(n) <= 4n which is Theta(n), so linear.

Top k summary so far:
Sort: Theta(n * logn)
Selection/insertion: Theta(nk)
Partition: Theta(n)
Heap: Theta(n * logk)

Heaps of Fun:
-Insert
-Find min
-Remove min

Heap:
1. balanced binary tree
2. value in a node is no bigger than the values of the children

Heap Number: positions in the array:
Parent of some node i at position (i-1) / 2
Left child of some node i at position 2i + 1
Right child of some node i at position 2i + 2


